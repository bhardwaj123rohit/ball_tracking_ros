# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from learn_ball/ballCor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ballCor(genpy.Message):
  _md5sum = "a81fb488530784a24d84e3f7199f24f6"
  _type = "learn_ball/ballCor"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string heading
string color
int64 x
int64 y
int64 radius
int64 upperH
int64 upperS
int64 upperV
int64 lowerH
int64 lowerS
int64 lowerV"""
  __slots__ = ['heading','color','x','y','radius','upperH','upperS','upperV','lowerH','lowerS','lowerV']
  _slot_types = ['string','string','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading,color,x,y,radius,upperH,upperS,upperV,lowerH,lowerS,lowerV

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ballCor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.heading is None:
        self.heading = ''
      if self.color is None:
        self.color = ''
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.radius is None:
        self.radius = 0
      if self.upperH is None:
        self.upperH = 0
      if self.upperS is None:
        self.upperS = 0
      if self.upperV is None:
        self.upperV = 0
      if self.lowerH is None:
        self.lowerH = 0
      if self.lowerS is None:
        self.lowerS = 0
      if self.lowerV is None:
        self.lowerV = 0
    else:
      self.heading = ''
      self.color = ''
      self.x = 0
      self.y = 0
      self.radius = 0
      self.upperH = 0
      self.upperS = 0
      self.upperV = 0
      self.lowerH = 0
      self.lowerS = 0
      self.lowerV = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.heading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9q().pack(_x.x, _x.y, _x.radius, _x.upperH, _x.upperS, _x.upperV, _x.lowerH, _x.lowerS, _x.lowerV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.heading = str[start:end].decode('utf-8')
      else:
        self.heading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.x, _x.y, _x.radius, _x.upperH, _x.upperS, _x.upperV, _x.lowerH, _x.lowerS, _x.lowerV,) = _get_struct_9q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.heading
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_9q().pack(_x.x, _x.y, _x.radius, _x.upperH, _x.upperS, _x.upperV, _x.lowerH, _x.lowerS, _x.lowerV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.heading = str[start:end].decode('utf-8')
      else:
        self.heading = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color = str[start:end].decode('utf-8')
      else:
        self.color = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.x, _x.y, _x.radius, _x.upperH, _x.upperS, _x.upperV, _x.lowerH, _x.lowerS, _x.lowerV,) = _get_struct_9q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9q = None
def _get_struct_9q():
    global _struct_9q
    if _struct_9q is None:
        _struct_9q = struct.Struct("<9q")
    return _struct_9q
